
#- hosts: local.centos
#  
#  tasks:
  
  - set_fact:
      centos6: ami-500d8546
  - set_fact:
      centos7: ami-ae7bfdb8
  
  - set_fact:
      ami_id: '{{ centos7 }}'
    when: ami_id is not defined
  - set_fact:
      group: default
    when: group is not defined
  - set_fact:
      vol_size: 8
    when: vol_size is not defined
  
  #- debug:
  #    msg: vol_size  be '{{ vol_size }}'
  
  - name: Start a CentOS Instance
    ec2:
      key_name: ec2key1
      instance_type: t2.medium
      image: '{{ ami_id }}'
      group: '{{ group }}'
      count: 1
      instance_tags:
        Name: centos-tmp
      #instance_initiated_shutdown_behavior: terminate
      wait: true
      region: us-east-1
      volumes:
        - device_name: /dev/xvda
          volume_type: gp2
          volume_size: '{{ vol_size }}'
      vpc_subnet_id: subnet-8e7767d6
      assign_public_ip: yes
      aws_access_key: '{{ lookup("env","AWS_ACCESS_KEY") }}'
      aws_secret_key: '{{ lookup("env","AWS_SECRET_KEY") }}'
    register: ec2
  
  - debug:
      var: ec2
  
  - set_fact:
      public_ip: '{{ ec2["instances"][0]["public_ip"] }}'
      root_id: '{{ ec2["instances"][0]["block_device_mapping"]["/dev/sda1"]["volume_id"] }}'
      avol_id: '{{ ec2["instances"][0]["block_device_mapping"]["/dev/xvda"]["volume_id"] }}'
  
  - name: Set root vol name tag
    ec2_tag:
      region: us-east-1
      resource: '{{ root_id }}'
      state: present
      aws_access_key: '{{ lookup("env","AWS_ACCESS_KEY") }}'
      aws_secret_key: '{{ lookup("env","AWS_SECRET_KEY") }}'
      tags:
        Name: centos-tmp
   
  - name: Set attached vol name tag
    ec2_tag:
      region: us-east-1
      resource: '{{ avol_id }}'
      state: present
      aws_access_key: '{{ lookup("env","AWS_ACCESS_KEY") }}'
      aws_secret_key: '{{ lookup("env","AWS_SECRET_KEY") }}'
      tags:
        Name: centos-tmp
  
  - name: Create ssh command source file
    shell: echo "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/ec2key1.pem -Y centos@{{ public_ip }}" > ssh.centos.tmp
    args:
      chdir: '{{ lookup("env","PWD") }}'
  
  - name: Create centos ip file
    shell: echo "{{ public_ip }}" > centos.ip
    args:
      chdir: '{{ lookup("env","PWD") }}'
  
  - name: Wait for it...
    wait_for_connection:
      timeout: 600
    vars:
      ansible_ssh_user: centos
    delegate_to: '{{ public_ip }}'
  
  # Sometimes this fails...?
  - name: Flush all iptables
    shell: |
      sudo iptables -F
    vars:
      ansible_ssh_user: centos
    delegate_to: '{{ public_ip }}'
    ignore_errors: true
  
  - name: Install packages, necessary
    yum:
      name: '{{ item }}'
      state: latest
    with_items:
      - unzip
      - vim
      - git
      - xterm
      - xauth
      - epel-release
      - bzip2
      - bzip2-devel
    become: yes
    vars:
      ansible_ssh_user: centos
    delegate_to: '{{ public_ip }}'
  
  - name: Install packages, nice-to-have
    yum:
      name: '{{ item }}'
      state: latest
    with_items:
      - tmux
      - lsof
      - ca-certificates # updating this may solve the epel repo issue
    become: yes
    vars:
      ansible_ssh_user: centos
    ignore_errors: yes
    delegate_to: '{{ public_ip }}'
  
  - name: Install packages, nice-to-have, epel-dependent
    yum:
      name: '{{ item }}'
      state: latest
    with_items:
      - transmission
      - iftop
    become: yes
    vars:
      ansible_ssh_user: centos
    ignore_errors: yes
    delegate_to: '{{ public_ip }}'
  
  - name: Install packages, node and such
    yum:
      name: '{{ item }}'
      state: latest
    with_items:
      - nodejs
      - nodejs-devel
    become: yes
    vars:
      ansible_ssh_user: centos
    ignore_errors: yes
    delegate_to: '{{ public_ip }}'
  
  - name: Install packages, browsers
    yum:
      name: '{{ item }}'
      state: latest
    with_items:
      - elinks
      - lynx
      - firefox
      - chromium
    become: yes
    vars:
      ansible_ssh_user: centos
    ignore_errors: yes
    delegate_to: '{{ public_ip }}'
  
  - include_tasks: tor-browser.yaml
    vars:
      - ansible_ssh_user: centos
      - ansible_ssh_private_key_file: /home/cesar/.ssh/ec2key1.pem
    with_items:
      - '{{ public_ip }}'



 
